name: .NET

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - name: Install dotnet format
        run: dotnet tool update --global dotnet-format
      - name: Run dotnet format
        run: dotnet format --check --verbosity diagnostic
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - name: Authenticate nuget
        run: dotnet nuget add source --username ${{ secrets.NUGET_AUTH_GITHUB_USERNAME }} --password ${{ secrets.NUGET_AUTH_GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/City-of-Lincoln-Council/index.json"
      - name: Test
        run: dotnet test --logger:"console;verbosity=detailed"
  build:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Build Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      - name: Authenticate nuget
        run: dotnet nuget add source --username ${{ secrets.NUGET_AUTH_GITHUB_USERNAME }} --password ${{ secrets.NUGET_AUTH_GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/City-of-Lincoln-Council/index.json"

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp
  terraform-staging:
    name: "Terraform Staging"
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    runs-on: ubuntu-latest
    environment: "Staging"

    defaults:
      run:
        shell: bash
        working-directory: "./terraform"

    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform fmt
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init -backend-config="storage_account_name=${{secrets.STORAGE_ACCOUNT_NAME}}" -backend-config="resource_group_name=${{secrets.RESOURCE_GROUP_NAME}}" -backend-config="container_name=${{secrets.CONTAINER_NAME}}" -backend-config="key=${{secrets.STORAGE_ACCOUNT_KEY}}"

      - name: Add env file
        run: |
          touch env.tfvars
          echo "storage_account_name=${{secrets.STORAGE_ACCOUNT_NAME}}" >> env.tfvars
          echo "service_name=${{secrets.SERVICE_NAME}}" >> env.tfvars
          echo "storage_container_name=${{secrets.STORAGE_CONTAINER_NAME}}" >> env.tfvars
          echo "storage_container_name_staging=${{secrets.STORAGE_CONTAINER_NAME_STAGING}}" >> env.tfvars
          echo "container_name=${{secrets.CONTAINER_NAME}}" >> env.tfvars
          echo "resource_group_name=${{secrets.RESOURCE_GROUP_NAME}}" >> env.tfvars
          echo "resource_group_location=${{secrets.RESOURCE_GROUP_LOCATION}}" >> env.tfvars 
          echo "key=${{secrets.STORAGE_ACCOUNT_KEY}}" >> env.tfvars
          echo "environment=staging" >> env.tfvars
          echo "gov_notify_key=\"XXX\"" >> env.tfvars 
          echo "address_api_url=\"XXX\"" >> env.tfvars
          echo "authentication_identifier=${{secrets.AUTHENTICATION_IDENTIFIER}}" >> env.tfvars
          echo "internal_email=\"XXX\"" >> env.tfvars
          echo "confirmation_email_notify_template_id=\"XXX\"" >> env.tfvars
          echo "confirmation_sms_notify_template_id=\"XXX\"" >> env.tfvars
          echo "internal_email_notify_template_id=\"XXX\"" >> env.tfvars 
          echo "days_until_image_expiry=\"XXX\"" >> env.tfvars s
          echo "scheduling_api_url=\"XXX\"" >> env.tfvars
          echo "jwt_secret=${{secrets.JWT_SECRET}}" >> env.tfvars 
          echo "sentry_dsn=\"XXX\"" >> env.tfvars
          echo "sor_configuration=\"XXX\"" >> env.tfvars

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: terraform plan -var-file="env.tfvars"

      - name: Terraform Apply
        id: terraform_apply
        run: |
          terraform apply -auto-approve -var-file="env.tfvars"

  deploy-staging:
    name: "Deploy Staging"
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [test, build]
    environment:
      name: "Staging"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: "housing-repairs-online-api-newark"
          slot-name: "Staging"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_STAGING }}
          package: .
  deploy-production:
    name: "Deploy Production"
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: "housing-repairs-online-api-newark"
          slot-name: "Production"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_PRODUCTION }}
          package: .

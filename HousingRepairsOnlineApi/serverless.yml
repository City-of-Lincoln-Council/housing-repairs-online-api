service: HousingRepairsOnlineApi
provider:
  name: aws
  runtime: dotnet6
  memorySize: 2048
  tracing:
    lambda: true
    apiGateway: true
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  # TODO: Enable this line if DynamoDb is in use
  #account: ${opt:account}
  region: eu-west-2
  apiKeys:
    - secureAccess:
        - api-key-${self:service}-${self:provider.stage}
  usagePlan:
    - secureAccess:
        throttle:
          burstLimit: 200
          rateLimit: 100
  environment:
    S3_IMAGE_BUCKET_NAME: housing-repairs-online-api-${self:provider.stage}-bucket
  s3:
    imagesBucket:
      accessControl: Private
      name: ${self:provider.environment.S3_IMAGE_BUCKET_NAME}
      bucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      publicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      corsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - POST
            AllowedOrigins: ${self:custom.corsDomains.${self:provider.stage}}

package:
  artifact: ./bin/release/net6.0/HousingRepairsOnlineApi.zip

functions:
  HousingRepairsOnlineApi:
    name: ${self:service}-${self:provider.stage}
    handler: HousingRepairsOnlineApi::HousingRepairsOnlineApi.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    timeout: 30
    environment:
      AUTHENTICATION_IDENTIFIER: ${ssm:/HousingRepairsOnlineApi/${self:provider.stage}/authentication-identifier}
      JWT_SECRET: ${ssm:/HousingRepairsOnlineApi/${self:provider.stage}/jwt-secret}
      GOV_NOTIFY_KEY: ${ssm:/HousingRepairsOnlineApi/${self:provider.stage}/gov-notify-key}
      CONFIRMATION_SMS_NOTIFY_TEMPLATE_ID: ${ssm:/HousingRepairsOnlineApi/${self:provider.stage}/confirmation-sms-notify-template-id}
      CONFIRMATION_EMAIL_NOTIFY_TEMPLATE_ID: ${ssm:/HousingRepairsOnlineApi/${self:provider.stage}/confirmation-email-notify-template-id}
      INTERNAL_EMAIL_NOTIFY_TEMPLATE_ID: ${ssm:/HousingRepairsOnlineApi/${self:provider.stage}/internal-email-notify-template-id}
      INTERNAL_EMAIL: ${ssm:/HousingRepairsOnlineApi/${self:provider.stage}/internal-email}
      INTERNAL_EMAIL_ENABLED: ${ssm:/HousingRepairsOnlineApi/${self:provider.stage}/internal-email-enabled}
      DAYS_UNTIL_IMAGE_EXPIRY: ${ssm:/HousingRepairsOnlineApi/${self:provider.stage}/days-until-image-expiry}
      ADDRESSES_API_URL: ${ssm:/HousingRepairsOnlineApi/${self:provider.stage}/addresses-api-url}
      SCHEDULING_API_URL: ${ssm:/HousingRepairsOnlineApi/${self:provider.stage}/scheduling-api-url}
      SENTRY_DSN: ${ssm:/HousingRepairsOnlineApi/${self:provider.stage}/sentry-dsn}
      SENTRY_ENVIRONMENT: ${self:provider.stage}
      REPAIRS_HUB_API_TOKEN: ${ssm:/HousingRepairsOnlineApi/${self:provider.stage}/repairs-api-token}
      REPAIRS_HUB_API_URL: ${ssm:/HousingRepairsOnlineApi/${self:provider.stage}/repairshub-api-base-url}
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: "*"
            headers:
              - Content-Type
              - If-Match
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-correlation-id
            allowCredentials: false
      - http:
          path: /swagger/{proxy+}
          method: GET
          private: false
      - s3:
          bucket: imagesBucket
resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
          - PolicyName: imagesBucketAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                  - s3:PutObject
                  - s3:PutObjectTagging
                  - s3:DeleteObject
                Effect: "Allow"
                Resource:
                  - "arn:aws:s3:::${self:provider.environment.S3_IMAGE_BUCKET_NAME}/*"
          - PolicyName: dynamoDBAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:BatchGet*"
                    - "dynamodb:BatchWrite"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:DescribeStream"
                    - "dynamodb:DescribeTable"
                    - "dynamodb:Get*"
                    - "dynamodb:PutItem"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:dynamodb"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "table/HousingRepairsOnline"
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:dynamodb"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "table/HousingRepairsOnline/index/*"
custom:
  corsDomains:
    staging:
      - "https://*.hackney.gov.uk"
    production:
      - "https://*.hackney.gov.uk"
    development:
      - "https://*.hackney.gov.uk"
  vpc:
    development:
      subnetIds:
        - subnet-0deabb5d8fb9c3446
        - subnet-000b89c249f12a8ad
    staging:
      subnetIds:
        - subnet-06d3de1bd9181b0d7
        - subnet-0ed7d7713d1127656
    production:
      subnetIds:
        - subnet-01d3657f97a243261
        - subnet-0b7b8fea07efabf34
